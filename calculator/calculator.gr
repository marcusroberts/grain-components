module Calculator

from "runtime/dataStructures" include DataStructures
from "runtime/unsafe/wasmi32" include WasmI32
from "runtime/unsafe/wasmi64" include WasmI64
from "runtime/unsafe/wasmf32" include WasmF32
from "runtime/unsafe/wasmf64" include WasmF64
from "runtime/unsafe/memory" include Memory
from "int32" include Int32
from "int64" include Int64
from "char" include Char
from "list" include List

@unsafe
provide let cabi_realloc = (
  originalPtr: WasmI32,
  originalSize: WasmI32,
  alignment: WasmI32,
  newSize: WasmI32,
) => {
  if (WasmI32.eqz(originalPtr)) {
    Memory.malloc(newSize)
  } else {
    let newPtr = Memory.malloc(newSize)
    let amt = if (WasmI32.(<)(originalSize, newSize)) originalSize else newSize
    Memory.copy(newPtr, originalPtr, amt)
    Memory.free(originalPtr)
    newPtr
  }
}

provide record Resource<a> {
  mut handle: Int32,
  rep: a,
}

provide module Add {
  @externalName("add")
  foreign wasm wit_bindgen_add:
    (WasmI32, WasmI32) => WasmI32 from "docs:calculator/add@0.1.0"

  @unsafe
  provide let add: (Uint32, Uint32) => Uint32 = (a, b) => {
    let ret = wit_bindgen_add(
      WasmI32.load(WasmI32.fromGrain(a), 4n),
      WasmI32.load(WasmI32.fromGrain(b), 4n)
    )
    WasmI32.toGrain(DataStructures.newUint32(ret)): Uint32
  }
}

// Export functions from docs:calculator/calculate@0.1.0
provide enum Op {
  Add,
}

module CalculateExports {
  provide let evalExpression = (op: Op, x: Uint32, y: Uint32) => {
    match (op) {
      Add => Add.add(x, y),
    }
  }
}

@unsafe
@externalName("docs:calculator/calculate@0.1.0#eval-expression")
provide let docsCalculatorCalculate010EvalExpression = (
  arg0: WasmI32,
  arg1: WasmI32,
  arg2: WasmI32,
) => {
  let result = CalculateExports.evalExpression(
    match (arg0) {
      _ => {
        Add
      },
    },
    WasmI32.toGrain(DataStructures.newUint32(arg1)): Uint32,
    WasmI32.toGrain(DataStructures.newUint32(arg2)): Uint32
  )
  WasmI32.load(WasmI32.fromGrain(result), 4n)
}
