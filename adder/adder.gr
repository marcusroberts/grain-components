module Adder

from "runtime/dataStructures" include DataStructures
from "runtime/unsafe/wasmi32" include WasmI32
from "runtime/unsafe/wasmi64" include WasmI64
from "runtime/unsafe/wasmf32" include WasmF32
from "runtime/unsafe/wasmf64" include WasmF64
from "runtime/unsafe/memory" include Memory
from "int32" include Int32
from "int64" include Int64
from "char" include Char
from "list" include List

from "uint32" include Uint32

@unsafe
provide let cabi_realloc = (
  originalPtr: WasmI32,
  originalSize: WasmI32,
  alignment: WasmI32,
  newSize: WasmI32,
) => {
  if (WasmI32.eqz(originalPtr)) {
    Memory.malloc(newSize)
  } else {
    let newPtr = Memory.malloc(newSize)
    let amt = if (WasmI32.(<)(originalSize, newSize)) originalSize else newSize
    Memory.copy(newPtr, originalPtr, amt)
    Memory.free(originalPtr)
    newPtr
  }
}

provide record Resource<a> {
  mut handle: Int32,
  rep: a,
}

// Export functions from docs:calculator/add@0.1.0

module AddExports {
  use Uint32.{ (+) }

  provide let add = (a: Uint32, b: Uint32) => {
    a + b
  }
}

@unsafe
@externalName("docs:calculator/add@0.1.0#add")
provide let docsCalculatorAdd010Add = (arg0: WasmI32, arg1: WasmI32) => {
  let result = AddExports.add(
    WasmI32.toGrain(DataStructures.newUint32(arg0)): Uint32,
    WasmI32.toGrain(DataStructures.newUint32(arg1)): Uint32
  )
  WasmI32.load(WasmI32.fromGrain(result), 4n)
}
